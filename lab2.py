# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WdBRp6n2_uPhne_1UzIS_eHon2X_TP6g
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('drive/MyDrive/ColabNotebooks/milk.csv', sep=";", encoding='windows-1251', skipinitialspace=True)
#df['milk'] = df['milk'].apply(lambda x: x.replace(',','.'))
df['milk'] = pd.to_numeric(df['milk'],errors = 'ignore')
df.info()

df

# Добавление меток месяцев
rows_in_df = 168
date_list = []
for i in range(1, rows_in_df + 1):
  date_list.append(i)
df['date'] = date_list
df

# График исходных данных

plt.scatter(df['date'],df['milk'], alpha=0.75)

plt.xlabel('month')
plt.ylabel('milk')
plt.show()

# Линия тренда
x = df['date']
y = df['milk']
plt.scatter(x, y)

z = np.polyfit(x, y, 1)
p = np.poly1d(z)
plt.plot(x,p(x),"r--")
plt.xlabel('month')
plt.ylabel('milk')

plt.show()

# Построение модели регрессии
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
y = df.iloc[:,:-1].values
X = df.iloc[:,1:].values

lr.fit(X, y)

# Пример сезонности за 1 год.
plt.scatter(X[ :12], y[ :12]);

plt.xlabel('month')
plt.ylabel('milk')
plt.show()

# Регрессия
y_lr = lr.predict(X)

plt.scatter(X, y);
plt.plot (X, y_lr, 'r');

plt.xlabel('month')
plt.ylabel('milk')
plt.show()

# Продление массива на 8 месяцев для создания предсказания
date_list = []
for i in range(169, 177):
  date_list.append(i)
z = np.concatenate((X, np.array(date_list).reshape(-1,1)), axis=0)

# Предсказание продаж
y_lr = lr.predict(z)

plt.scatter(X, y);
plt.plot (z, y_lr, 'r');

plt.xlabel('month')
plt.ylabel('milk')

plt.show()

#Продажи на прогназируемый период
print(y_lr[-8:])



# import matplotlib.pyplot as plt
# from matplotlib.dates import (DAILY, DateFormatter,
#                               rrulewrapper, RRuleLocator, drange)
# import datetime

# date = datetime.datetime(2020, 2, 20)
# date += datetime.timedelta(days=1)
# print(date)

# rule = rrulewrapper(DAILY, interval=15)
# loc = RRuleLocator(rule)
# formatter = DateFormatter('%d/%m/%y')

# date1 = datetime.date(2000, 2, 1)
# date2 = datetime.date(2000, 8, 1)

# delta = datetime.timedelta(days=30)
# dates = drange(date1, date2, delta)
# dates



# y_axis = np.arange( len(dates) )
  
# fig, ax = plt.subplots()
# ax.plot_date(dates, y_axis * y_axis)

# ax.xaxis.set_major_locator(loc)
# ax.xaxis.set_major_formatter(formatter)
# ax.xaxis.set_tick_params(rotation=30, labelsize=10)

# import matplotlib.pyplot as plt
# from matplotlib.dates import (MONTHLY, YEARLY, DateFormatter,
#                               rrulewrapper, RRuleLocator, drange)
# import datetime

# # rule = rrulewrapper(YEARLY, byeaster=1, interval=5)
# # loc = RRuleLocator(rule)
# # formatter = DateFormatter('%d/%m/%y')
# # date1 = datetime.date(1952, 1, 1)
# # date2 = datetime.date(2004, 4, 12)
# # delta = datetime.timedelta(days=100)
# # dates = drange(date1, date2, delta)

# # s = np.random.rand(len(dates)) 

# # fig, ax = plt.subplots()
# # plt.plot_date(dates, s)
# # ax.xaxis.set_major_locator(loc)
# # ax.xaxis.set_major_formatter(formatter)
# # ax.xaxis.set_tick_params(rotation=30, labelsize=10)

# rule = rrulewrapper(MONTHLY, interval=6)
# loc = RRuleLocator(rule)
# formatter = DateFormatter('%d/%m/%y')

# fig, ax = plt.subplots()
# plt.plot_date(df['date'],df['sales'])
# ax.xaxis.set_major_locator(loc)
# ax.xaxis.set_major_formatter(formatter)
# ax.xaxis.set_tick_params(rotation=30, labelsize=10)



# plt.scatter(df['date'],df['sales'], alpha=0.65)

# plt.xlabel('date')
# plt.ylabel('sales')
# plt.show()

# df['date'] = df['date'].apply(lambda x: x.timestamp())